package com.mycompany.jsynthmuke;

import com.formdev.flatlaf.FlatLightLaf;
import com.jsyn.scope.AudioScope;
import com.jsyn.scope.AudioScopeProbe;
import com.mycompany.jsynthmuke.components.*;
import com.mycompany.jsynthmuke.synthesizer.*;
import java.awt.Color;
import java.util.Locale;
import com.github.kwhat.jnativehook.GlobalScreen;
import com.github.kwhat.jnativehook.NativeHookException;
import com.github.kwhat.jnativehook.keyboard.NativeKeyEvent;
import com.github.kwhat.jnativehook.keyboard.NativeKeyListener;

import javax.swing.*;

public class MainWindow extends javax.swing.JFrame implements NativeKeyListener {

    private int octave;
    private final Keyboard kb;
    private final MukeSynthesizer synth;
    private final AudioScope scope;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        kb = new Keyboard();
        synth = new MukeSynthesizer();
        initComponents();
        startListener();
        
        
        synth.oscillator.setType(WaveType.SQUARE);
        octave = 4;
        //set default amplitude for sound
        synth.oscillator.amplitude.set(.15);
        synth.setDefaultAmp(.15);
        //set default adsr values
        synth.setAttack(adsrAttackSlider.getValue());
        synth.setDecay(adsrDecaySlider.getValue());
        synth.setSustain(100 - (double)adsrSustainSlider.getValue());
        synth.setRelease(adsrReleaseSlider.getValue());
        
        //start up visualizers
        scope = new AudioScope(synth.synth);
        JInternalFrame frame = new JInternalFrame();
        frame.setSize(312, 132);
        frame.setVisible(true);
        frame.validate();

        AudioScopeProbe probe = scope.addProbe(synth.filter.output);
        probe.setAutoScaleEnabled(true);
        //probe.setVerticalScale(1.1);
        probe.setColor(Color.BLUE);
        scope.setTriggerMode(AudioScope.TriggerMode.NORMAL);
        scope.getView().setControlsVisible(false);
        
        // Start a thread that will periodically update the scope.
        scope.start();
        // Add the scope's View to your UI
        frame.add(scope.getView());
        frame.validate();
        ivp.add(frame);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        arpButtonGroup = new javax.swing.ButtonGroup();
        oscButtonGroup = new javax.swing.ButtonGroup();
        lfoButtonGroup = new javax.swing.ButtonGroup();
        jPanelBottomThird = new javax.swing.JPanel();
        keyboardPanel = new javax.swing.JPanel();
        cN1 = new javax.swing.JButton();
        dN1 = new javax.swing.JButton();
        eN1 = new javax.swing.JButton();
        fN1 = new javax.swing.JButton();
        gN1 = new javax.swing.JButton();
        aN1 = new javax.swing.JButton();
        bN1 = new javax.swing.JButton();
        cN2 = new javax.swing.JButton();
        dN2 = new javax.swing.JButton();
        eN2 = new javax.swing.JButton();
        fN2 = new javax.swing.JButton();
        gN2 = new javax.swing.JButton();
        aN2 = new javax.swing.JButton();
        bN2 = new javax.swing.JButton();
        cN3 = new javax.swing.JButton();
        dF1 = new javax.swing.JButton();
        eF1 = new javax.swing.JButton();
        gF1 = new javax.swing.JButton();
        aF1 = new javax.swing.JButton();
        bF1 = new javax.swing.JButton();
        dF2 = new javax.swing.JButton();
        eF2 = new javax.swing.JButton();
        gF2 = new javax.swing.JButton();
        aF2 = new javax.swing.JButton();
        bF2 = new javax.swing.JButton();
        octavePanel = new javax.swing.JPanel();
        octaveUP = new javax.swing.JButton();
        octaveDOWN = new javax.swing.JButton();
        octaveLabel = new javax.swing.JLabel();
        octaveNum = new javax.swing.JLabel();
        randomPanel = new javax.swing.JPanel();
        mukeLabelScrollPane = new javax.swing.JScrollPane();
        mukeLabelTextPane = new javax.swing.JTextPane();
        jPanelarpOscLFO = new javax.swing.JPanel();
        arpPanel = new javax.swing.JPanel();
        arpLabel = new javax.swing.JLabel();
        arpRateSlider = new javax.swing.JSlider();
        arpUP = new javax.swing.JToggleButton();
        arpDOWN = new javax.swing.JToggleButton();
        oscPanel = new javax.swing.JPanel();
        oscLabel = new javax.swing.JLabel();
        oscAmpSlider = new javax.swing.JSlider();
        oscSquareButton = new javax.swing.JToggleButton();
        oscSawButton = new javax.swing.JToggleButton();
        lfoPanel = new javax.swing.JPanel();
        lfoLabel = new javax.swing.JLabel();
        lfoFreqSlider = new javax.swing.JSlider();
        lfoSinButton = new javax.swing.JToggleButton();
        lfoSawButton = new javax.swing.JToggleButton();
        lfoComponentComboBox = new javax.swing.JComboBox<>();
        lfoValueComboBox = new javax.swing.JComboBox<>();
        jPanelVisualizer = new javax.swing.JPanel();
        visualizerLabel = new javax.swing.JLabel();
        ivp = new javax.swing.JPanel();
        jPanelFilter = new javax.swing.JPanel();
        filterLabel = new javax.swing.JLabel();
        filterHPSlider = new javax.swing.JSlider();
        filterAmpSlider = new javax.swing.JSlider();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanelADSR = new javax.swing.JPanel();
        adsrLabel = new javax.swing.JLabel();
        adsrAttackSlider = new javax.swing.JSlider();
        adsrDecaySlider = new javax.swing.JSlider();
        adsrSustainSlider = new javax.swing.JSlider();
        adsrReleaseSlider = new javax.swing.JSlider();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanelEffects = new javax.swing.JPanel();
        effectsLabel = new javax.swing.JLabel();
        effectssettingsPanel = new javax.swing.JPanel();
        effectsSettingsTP = new javax.swing.JTabbedPane();
        reverbPanel = new javax.swing.JPanel();
        reverbDryWetSlider = new javax.swing.JSlider();
        reverbEnable = new javax.swing.JToggleButton();
        delayPanel = new javax.swing.JPanel();
        delayTimeSlider = new javax.swing.JSlider();
        delayFeedbackSlider = new javax.swing.JSlider();
        delayEnable = new javax.swing.JToggleButton();
        chorusPanel = new javax.swing.JPanel();
        chorusDepthSlider = new javax.swing.JSlider();
        chorusRateSlider = new javax.swing.JSlider();
        chorusEnable = new javax.swing.JToggleButton();
        compPanel = new javax.swing.JPanel();
        compThresSlider = new javax.swing.JSlider();
        compRatioSlider = new javax.swing.JSlider();
        compAttackSlider = new javax.swing.JSlider();
        compReleaseSlider = new javax.swing.JSlider();
        compEnable = new javax.swing.JToggleButton();
        eqPanel = new javax.swing.JPanel();
        eqBassSlider = new javax.swing.JSlider();
        eqMidSlider = new javax.swing.JSlider();
        eqTrebleSlider = new javax.swing.JSlider();
        eqEnable = new javax.swing.JToggleButton();
        MenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        viewMenu = new javax.swing.JMenu();
        keyboardTextEnable = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanelBottomThird.setBackground(new java.awt.Color(153, 153, 153));

        keyboardPanel.setBackground(new java.awt.Color(204, 204, 204));

        cN1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cN1.setName("cN1"); // NOI18N
        cN1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        dN1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dN1.setName("dN1"); // NOI18N
        dN1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        eN1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        eN1.setName("eN1"); // NOI18N
        eN1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        fN1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        fN1.setName("fN1"); // NOI18N
        fN1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        gN1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gN1.setName("gN1"); // NOI18N
        gN1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        aN1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        aN1.setName("aN1"); // NOI18N
        aN1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        bN1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bN1.setName("bN1"); // NOI18N
        bN1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        cN2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cN2.setName("cN2"); // NOI18N
        cN2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        dN2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dN2.setName("dN2"); // NOI18N
        dN2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        eN2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        eN2.setName("eN2"); // NOI18N
        eN2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        fN2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        fN2.setName("fN2"); // NOI18N
        fN2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        gN2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gN2.setName("gN2"); // NOI18N
        gN2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        aN2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        aN2.setName("aN2"); // NOI18N
        aN2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        bN2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bN2.setName("bN2"); // NOI18N
        bN2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        cN3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cN3.setName("cN3"); // NOI18N
        cN3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        dF1.setBackground(new java.awt.Color(51, 51, 51));
        dF1.setForeground(new java.awt.Color(255, 255, 255));
        dF1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dF1.setName("dF1"); // NOI18N
        dF1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        eF1.setBackground(new java.awt.Color(51, 51, 51));
        eF1.setForeground(new java.awt.Color(255, 255, 255));
        eF1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        eF1.setName("eF1"); // NOI18N
        eF1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        gF1.setBackground(new java.awt.Color(51, 51, 51));
        gF1.setForeground(new java.awt.Color(255, 255, 255));
        gF1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gF1.setName("gF1"); // NOI18N
        gF1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        aF1.setBackground(new java.awt.Color(51, 51, 51));
        aF1.setForeground(new java.awt.Color(255, 255, 255));
        aF1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        aF1.setName("aF1"); // NOI18N
        aF1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        bF1.setBackground(new java.awt.Color(51, 51, 51));
        bF1.setForeground(new java.awt.Color(255, 255, 255));
        bF1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bF1.setName("bF1"); // NOI18N
        bF1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        dF2.setBackground(new java.awt.Color(51, 51, 51));
        dF2.setForeground(new java.awt.Color(255, 255, 255));
        dF2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dF2.setName("dF2"); // NOI18N
        dF2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        eF2.setBackground(new java.awt.Color(51, 51, 51));
        eF2.setForeground(new java.awt.Color(255, 255, 255));
        eF2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        eF2.setName("eF2"); // NOI18N
        eF2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        gF2.setBackground(new java.awt.Color(51, 51, 51));
        gF2.setForeground(new java.awt.Color(255, 255, 255));
        gF2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gF2.setName("gF2"); // NOI18N
        gF2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        aF2.setBackground(new java.awt.Color(51, 51, 51));
        aF2.setForeground(new java.awt.Color(255, 255, 255));
        aF2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        aF2.setName("aF2"); // NOI18N
        aF2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        bF2.setBackground(new java.awt.Color(51, 51, 51));
        bF2.setForeground(new java.awt.Color(255, 255, 255));
        bF2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bF2.setName("bF2"); // NOI18N
        bF2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                KeyPressedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KeyReleasedHandler(evt);
            }
        });

        javax.swing.GroupLayout keyboardPanelLayout = new javax.swing.GroupLayout(keyboardPanel);
        keyboardPanel.setLayout(keyboardPanelLayout);
        keyboardPanelLayout.setHorizontalGroup(
            keyboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyboardPanelLayout.createSequentialGroup()
                .addComponent(cN1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(dN1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(eN1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(fN1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(gN1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(aN1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(bN1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(cN2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(dN2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(eN2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(fN2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(gN2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(aN2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(bN2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(cN3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(keyboardPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(dF1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(eF1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(gF1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(aF1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(bF1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(dF2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(eF2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(gF2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(aF2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(bF2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        keyboardPanelLayout.setVerticalGroup(
            keyboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyboardPanelLayout.createSequentialGroup()
                .addGroup(keyboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dF2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eF2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gF2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bF2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aF2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dF1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eF1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gF1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bF1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aF1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(keyboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cN1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dN1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eN1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fN1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gN1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aN1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bN1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cN2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dN2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eN2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fN2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gN2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aN2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bN2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cN3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        octaveUP.setText("UP");
        octaveUP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                octaveUPMouseClicked(evt);
            }
        });

        octaveDOWN.setText("DOWN");
        octaveDOWN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                octaveDOWNMouseClicked(evt);
            }
        });

        octaveLabel.setText("Octave:");

        octaveNum.setText("4");

        javax.swing.GroupLayout octavePanelLayout = new javax.swing.GroupLayout(octavePanel);
        octavePanel.setLayout(octavePanelLayout);
        octavePanelLayout.setHorizontalGroup(
            octavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(octavePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(octavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(octaveDOWN, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(octaveUP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(octavePanelLayout.createSequentialGroup()
                        .addComponent(octaveLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(octaveNum)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        octavePanelLayout.setVerticalGroup(
            octavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(octavePanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(octavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(octaveLabel)
                    .addComponent(octaveNum))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(octaveUP, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(octaveDOWN, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mukeLabelTextPane.setEditable(false);
        mukeLabelTextPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mukeLabelTextPane.setText("JSynth MUKE inc.");
        mukeLabelScrollPane.setViewportView(mukeLabelTextPane);

        javax.swing.GroupLayout randomPanelLayout = new javax.swing.GroupLayout(randomPanel);
        randomPanel.setLayout(randomPanelLayout);
        randomPanelLayout.setHorizontalGroup(
            randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mukeLabelScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(236, Short.MAX_VALUE))
        );
        randomPanelLayout.setVerticalGroup(
            randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mukeLabelScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelBottomThirdLayout = new javax.swing.GroupLayout(jPanelBottomThird);
        jPanelBottomThird.setLayout(jPanelBottomThirdLayout);
        jPanelBottomThirdLayout.setHorizontalGroup(
            jPanelBottomThirdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBottomThirdLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(octavePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyboardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(randomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelBottomThirdLayout.setVerticalGroup(
            jPanelBottomThirdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBottomThirdLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBottomThirdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(randomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(keyboardPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(octavePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanelarpOscLFO.setBackground(new java.awt.Color(204, 204, 204));
        jPanelarpOscLFO.setPreferredSize(new java.awt.Dimension(345, 224));

        arpPanel.setPreferredSize(new java.awt.Dimension(78, 210));

        arpLabel.setBackground(new java.awt.Color(204, 204, 204));
        arpLabel.setText("Arp.");
        arpLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        arpLabel.setEnabled(false);

        arpRateSlider.setToolTipText("");
        arpRateSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Rate:"));
        arpRateSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        arpRateSlider.setEnabled(false);

        arpButtonGroup.add(arpUP);
        arpUP.setSelected(true);
        arpUP.setText("UP");
        arpUP.setEnabled(false);

        arpButtonGroup.add(arpDOWN);
        arpDOWN.setText("DOWN");
        arpDOWN.setEnabled(false);

        javax.swing.GroupLayout arpPanelLayout = new javax.swing.GroupLayout(arpPanel);
        arpPanel.setLayout(arpPanelLayout);
        arpPanelLayout.setHorizontalGroup(
            arpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(arpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(arpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(arpUP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arpDOWN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(arpRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(arpPanelLayout.createSequentialGroup()
                        .addComponent(arpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        arpPanelLayout.setVerticalGroup(
            arpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(arpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(arpLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(arpRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(arpUP, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(arpDOWN, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        oscLabel.setText("Osc.");
        oscLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        oscAmpSlider.setMaximum(300);
        oscAmpSlider.setToolTipText("");
        oscAmpSlider.setValue(150);
        oscAmpSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Amp."));
        oscAmpSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        oscAmpSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                oscAmpSliderStateChanged(evt);
            }
        });

        oscButtonGroup.add(oscSquareButton);
        oscSquareButton.setSelected(true);
        oscSquareButton.setText("SQUARE");
        oscSquareButton.setIconTextGap(0);
        oscSquareButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        oscSquareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscSquareButtonActionPerformed(evt);
            }
        });

        oscButtonGroup.add(oscSawButton);
        oscSawButton.setText("SAW");
        oscSawButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        oscSawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscSawButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout oscPanelLayout = new javax.swing.GroupLayout(oscPanel);
        oscPanel.setLayout(oscPanelLayout);
        oscPanelLayout.setHorizontalGroup(
            oscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(oscPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(oscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(oscAmpSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(oscSquareButton, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(oscSawButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(oscPanelLayout.createSequentialGroup()
                        .addComponent(oscLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        oscPanelLayout.setVerticalGroup(
            oscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(oscPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(oscLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(oscAmpSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(oscSquareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(oscSawButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lfoPanel.setPreferredSize(new java.awt.Dimension(78, 210));

        lfoLabel.setText("LFO");
        lfoLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lfoLabel.setEnabled(false);

        lfoFreqSlider.setToolTipText("");
        lfoFreqSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Freq."));
        lfoFreqSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lfoFreqSlider.setEnabled(false);

        lfoButtonGroup.add(lfoSinButton);
        lfoSinButton.setSelected(true);
        lfoSinButton.setText("SIN");
        lfoSinButton.setEnabled(false);
        lfoSinButton.setIconTextGap(0);
        lfoSinButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        lfoButtonGroup.add(lfoSawButton);
        lfoSawButton.setText("SAW");
        lfoSawButton.setEnabled(false);
        lfoSawButton.setIconTextGap(0);
        lfoSawButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        lfoComponentComboBox.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        lfoComponentComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Component", "Item 2", "Item 3", "Item 4" }));
        lfoComponentComboBox.setEnabled(false);

        lfoValueComboBox.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        lfoValueComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Value", "Item 2", "Item 3", "Item 4" }));
        lfoValueComboBox.setEnabled(false);

        javax.swing.GroupLayout lfoPanelLayout = new javax.swing.GroupLayout(lfoPanel);
        lfoPanel.setLayout(lfoPanelLayout);
        lfoPanelLayout.setHorizontalGroup(
            lfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lfoFreqSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(lfoComponentComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lfoValueComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(lfoPanelLayout.createSequentialGroup()
                        .addGroup(lfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lfoLabel)
                            .addGroup(lfoPanelLayout.createSequentialGroup()
                                .addComponent(lfoSinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lfoSawButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        lfoPanelLayout.setVerticalGroup(
            lfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lfoFreqSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lfoSinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lfoSawButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lfoComponentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lfoValueComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelarpOscLFOLayout = new javax.swing.GroupLayout(jPanelarpOscLFO);
        jPanelarpOscLFO.setLayout(jPanelarpOscLFOLayout);
        jPanelarpOscLFOLayout.setHorizontalGroup(
            jPanelarpOscLFOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelarpOscLFOLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(arpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(oscPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelarpOscLFOLayout.setVerticalGroup(
            jPanelarpOscLFOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelarpOscLFOLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelarpOscLFOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(oscPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                    .addComponent(arpPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanelVisualizer.setBackground(new java.awt.Color(204, 204, 204));

        visualizerLabel.setText("Visualizer");
        visualizerLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        visualizerLabel.setOpaque(true);

        javax.swing.GroupLayout ivpLayout = new javax.swing.GroupLayout(ivp);
        ivp.setLayout(ivpLayout);
        ivpLayout.setHorizontalGroup(
            ivpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 312, Short.MAX_VALUE)
        );
        ivpLayout.setVerticalGroup(
            ivpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 132, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelVisualizerLayout = new javax.swing.GroupLayout(jPanelVisualizer);
        jPanelVisualizer.setLayout(jPanelVisualizerLayout);
        jPanelVisualizerLayout.setHorizontalGroup(
            jPanelVisualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVisualizerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelVisualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelVisualizerLayout.createSequentialGroup()
                        .addComponent(visualizerLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(ivp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelVisualizerLayout.setVerticalGroup(
            jPanelVisualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVisualizerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(visualizerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ivp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelFilter.setBackground(new java.awt.Color(204, 204, 204));

        filterLabel.setText("Filter");
        filterLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        filterLabel.setOpaque(true);

        filterHPSlider.setMaximum(5000);
        filterHPSlider.setMinimum(50);
        filterHPSlider.setToolTipText("");
        filterHPSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("High Pass"));
        filterHPSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        filterHPSlider.setOpaque(true);
        filterHPSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                filterHPSliderStateChanged(evt);
            }
        });

        filterAmpSlider.setMaximum(150);
        filterAmpSlider.setToolTipText("");
        filterAmpSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Amplitude"));
        filterAmpSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        filterAmpSlider.setEnabled(false);
        filterAmpSlider.setOpaque(true);
        filterAmpSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                filterAmpSliderStateChanged(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("The high pass filter allows only high frequencies to \"pass\" through. This enables the user to remove low end frequencies from their sound.");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanelFilterLayout = new javax.swing.GroupLayout(jPanelFilter);
        jPanelFilter.setLayout(jPanelFilterLayout);
        jPanelFilterLayout.setHorizontalGroup(
            jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filterLabel)
                    .addGroup(jPanelFilterLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterHPSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(filterAmpSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanelFilterLayout.setVerticalGroup(
            jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFilterLayout.createSequentialGroup()
                        .addComponent(filterHPSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterAmpSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        jPanelADSR.setBackground(new java.awt.Color(204, 204, 204));

        adsrLabel.setText("ADSR");
        adsrLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        adsrLabel.setOpaque(true);

        adsrAttackSlider.setMaximum(200);
        adsrAttackSlider.setMinimum(1);
        adsrAttackSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        adsrAttackSlider.setToolTipText("");
        adsrAttackSlider.setValue(1);
        adsrAttackSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Att."));
        adsrAttackSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        adsrAttackSlider.setOpaque(true);
        adsrAttackSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                adsrAttackSliderStateChanged(evt);
            }
        });

        adsrDecaySlider.setMaximum(200);
        adsrDecaySlider.setMinimum(1);
        adsrDecaySlider.setOrientation(javax.swing.JSlider.VERTICAL);
        adsrDecaySlider.setToolTipText("");
        adsrDecaySlider.setValue(1);
        adsrDecaySlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Dec."));
        adsrDecaySlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        adsrDecaySlider.setOpaque(true);
        adsrDecaySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                adsrDecaySliderStateChanged(evt);
            }
        });

        adsrSustainSlider.setMinimum(1);
        adsrSustainSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        adsrSustainSlider.setToolTipText("");
        adsrSustainSlider.setValue(100);
        adsrSustainSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Sus."));
        adsrSustainSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        adsrSustainSlider.setOpaque(true);
        adsrSustainSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                adsrSustainSliderStateChanged(evt);
            }
        });

        adsrReleaseSlider.setMaximum(200);
        adsrReleaseSlider.setMinimum(1);
        adsrReleaseSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        adsrReleaseSlider.setToolTipText("");
        adsrReleaseSlider.setValue(1);
        adsrReleaseSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Rel."));
        adsrReleaseSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        adsrReleaseSlider.setOpaque(true);
        adsrReleaseSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                adsrReleaseSliderStateChanged(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText("The \"Attack, Decay, Sustain, Release\" edits the amplitude of the note at different times as it is pressed and released. This may cause notes to \"queue\" on the keyboard if the user presses and releases many notes in quick succession.");
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanelADSRLayout = new javax.swing.GroupLayout(jPanelADSR);
        jPanelADSR.setLayout(jPanelADSRLayout);
        jPanelADSRLayout.setHorizontalGroup(
            jPanelADSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelADSRLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelADSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(adsrLabel)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adsrAttackSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(adsrDecaySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(adsrSustainSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(adsrReleaseSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelADSRLayout.setVerticalGroup(
            jPanelADSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelADSRLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelADSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(adsrAttackSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addGroup(jPanelADSRLayout.createSequentialGroup()
                        .addComponent(adsrLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addComponent(adsrDecaySlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(adsrSustainSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(adsrReleaseSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanelEffects.setBackground(new java.awt.Color(204, 204, 204));

        effectsLabel.setText("Effects");
        effectsLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        effectsLabel.setEnabled(false);
        effectsLabel.setOpaque(true);

        effectsSettingsTP.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        effectsSettingsTP.setOpaque(true);

        reverbDryWetSlider.setMaximum(5000);
        reverbDryWetSlider.setToolTipText("");
        reverbDryWetSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Dry / Wet"));
        reverbDryWetSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        reverbDryWetSlider.setEnabled(false);
        reverbDryWetSlider.setOpaque(true);
        reverbDryWetSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                reverbDryWetSliderStateChanged(evt);
            }
        });

        reverbEnable.setText("ENABLE");
        reverbEnable.setEnabled(false);

        javax.swing.GroupLayout reverbPanelLayout = new javax.swing.GroupLayout(reverbPanel);
        reverbPanel.setLayout(reverbPanelLayout);
        reverbPanelLayout.setHorizontalGroup(
            reverbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reverbDryWetSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
            .addGroup(reverbPanelLayout.createSequentialGroup()
                .addComponent(reverbEnable)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        reverbPanelLayout.setVerticalGroup(
            reverbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reverbPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reverbDryWetSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reverbEnable)
                .addContainerGap(195, Short.MAX_VALUE))
        );

        effectsSettingsTP.addTab("Reverb", reverbPanel);

        delayTimeSlider.setMaximum(5000);
        delayTimeSlider.setToolTipText("");
        delayTimeSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Time"));
        delayTimeSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        delayTimeSlider.setEnabled(false);
        delayTimeSlider.setOpaque(true);
        delayTimeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                delayTimeSliderStateChanged(evt);
            }
        });

        delayFeedbackSlider.setMaximum(5000);
        delayFeedbackSlider.setToolTipText("");
        delayFeedbackSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Feedback"));
        delayFeedbackSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        delayFeedbackSlider.setEnabled(false);
        delayFeedbackSlider.setOpaque(true);
        delayFeedbackSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                delayFeedbackSliderStateChanged(evt);
            }
        });

        delayEnable.setText("ENABLE");
        delayEnable.setEnabled(false);

        javax.swing.GroupLayout delayPanelLayout = new javax.swing.GroupLayout(delayPanel);
        delayPanel.setLayout(delayPanelLayout);
        delayPanelLayout.setHorizontalGroup(
            delayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(delayTimeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
            .addComponent(delayFeedbackSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
            .addGroup(delayPanelLayout.createSequentialGroup()
                .addComponent(delayEnable)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        delayPanelLayout.setVerticalGroup(
            delayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(delayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(delayTimeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delayFeedbackSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delayEnable)
                .addContainerGap(115, Short.MAX_VALUE))
        );

        effectsSettingsTP.addTab("Delay", delayPanel);

        chorusDepthSlider.setMaximum(5000);
        chorusDepthSlider.setToolTipText("");
        chorusDepthSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Depth"));
        chorusDepthSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        chorusDepthSlider.setEnabled(false);
        chorusDepthSlider.setOpaque(true);
        chorusDepthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chorusDepthSliderStateChanged(evt);
            }
        });

        chorusRateSlider.setMaximum(5000);
        chorusRateSlider.setToolTipText("");
        chorusRateSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Rate"));
        chorusRateSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        chorusRateSlider.setEnabled(false);
        chorusRateSlider.setOpaque(true);
        chorusRateSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chorusRateSliderStateChanged(evt);
            }
        });

        chorusEnable.setText("ENABLE");
        chorusEnable.setEnabled(false);

        javax.swing.GroupLayout chorusPanelLayout = new javax.swing.GroupLayout(chorusPanel);
        chorusPanel.setLayout(chorusPanelLayout);
        chorusPanelLayout.setHorizontalGroup(
            chorusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chorusDepthSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
            .addComponent(chorusRateSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
            .addGroup(chorusPanelLayout.createSequentialGroup()
                .addComponent(chorusEnable)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        chorusPanelLayout.setVerticalGroup(
            chorusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chorusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chorusDepthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chorusRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chorusEnable)
                .addContainerGap(115, Short.MAX_VALUE))
        );

        effectsSettingsTP.addTab("Chorus", chorusPanel);

        compThresSlider.setMaximum(5000);
        compThresSlider.setToolTipText("");
        compThresSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Threshold"));
        compThresSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        compThresSlider.setEnabled(false);
        compThresSlider.setOpaque(true);
        compThresSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                compThresSliderStateChanged(evt);
            }
        });

        compRatioSlider.setMaximum(5000);
        compRatioSlider.setToolTipText("");
        compRatioSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Ratio"));
        compRatioSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        compRatioSlider.setEnabled(false);
        compRatioSlider.setOpaque(true);
        compRatioSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                compRatioSliderStateChanged(evt);
            }
        });

        compAttackSlider.setMaximum(5000);
        compAttackSlider.setToolTipText("");
        compAttackSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Attack"));
        compAttackSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        compAttackSlider.setEnabled(false);
        compAttackSlider.setOpaque(true);
        compAttackSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                compAttackSliderStateChanged(evt);
            }
        });

        compReleaseSlider.setMaximum(5000);
        compReleaseSlider.setToolTipText("");
        compReleaseSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Release"));
        compReleaseSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        compReleaseSlider.setEnabled(false);
        compReleaseSlider.setOpaque(true);
        compReleaseSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                compReleaseSliderStateChanged(evt);
            }
        });

        compEnable.setText("ENABLE");
        compEnable.setEnabled(false);

        javax.swing.GroupLayout compPanelLayout = new javax.swing.GroupLayout(compPanel);
        compPanel.setLayout(compPanelLayout);
        compPanelLayout.setHorizontalGroup(
            compPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(compThresSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
            .addComponent(compRatioSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
            .addComponent(compAttackSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
            .addComponent(compReleaseSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
            .addGroup(compPanelLayout.createSequentialGroup()
                .addComponent(compEnable)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        compPanelLayout.setVerticalGroup(
            compPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(compThresSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compRatioSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compAttackSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compReleaseSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compEnable)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        effectsSettingsTP.addTab("Compression", compPanel);

        eqBassSlider.setMaximum(5000);
        eqBassSlider.setToolTipText("");
        eqBassSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Amp. Bass"));
        eqBassSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        eqBassSlider.setEnabled(false);
        eqBassSlider.setOpaque(true);
        eqBassSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                eqBassSliderStateChanged(evt);
            }
        });

        eqMidSlider.setMaximum(5000);
        eqMidSlider.setToolTipText("");
        eqMidSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Amp. Mid"));
        eqMidSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        eqMidSlider.setEnabled(false);
        eqMidSlider.setOpaque(true);
        eqMidSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                eqMidSliderStateChanged(evt);
            }
        });

        eqTrebleSlider.setMaximum(5000);
        eqTrebleSlider.setToolTipText("");
        eqTrebleSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Amp. Treble"));
        eqTrebleSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        eqTrebleSlider.setEnabled(false);
        eqTrebleSlider.setOpaque(true);
        eqTrebleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                eqTrebleSliderStateChanged(evt);
            }
        });

        eqEnable.setText("ENABLE");
        eqEnable.setEnabled(false);

        javax.swing.GroupLayout eqPanelLayout = new javax.swing.GroupLayout(eqPanel);
        eqPanel.setLayout(eqPanelLayout);
        eqPanelLayout.setHorizontalGroup(
            eqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eqBassSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
            .addComponent(eqMidSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
            .addComponent(eqTrebleSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
            .addGroup(eqPanelLayout.createSequentialGroup()
                .addComponent(eqEnable)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        eqPanelLayout.setVerticalGroup(
            eqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eqPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eqBassSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eqMidSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eqTrebleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eqEnable)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        effectsSettingsTP.addTab("EQ", eqPanel);

        javax.swing.GroupLayout effectssettingsPanelLayout = new javax.swing.GroupLayout(effectssettingsPanel);
        effectssettingsPanel.setLayout(effectssettingsPanelLayout);
        effectssettingsPanelLayout.setHorizontalGroup(
            effectssettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(effectssettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(effectsSettingsTP, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        effectssettingsPanelLayout.setVerticalGroup(
            effectssettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(effectssettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(effectsSettingsTP, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelEffectsLayout = new javax.swing.GroupLayout(jPanelEffects);
        jPanelEffects.setLayout(jPanelEffectsLayout);
        jPanelEffectsLayout.setHorizontalGroup(
            jPanelEffectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEffectsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelEffectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(effectsLabel)
                    .addComponent(effectssettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelEffectsLayout.setVerticalGroup(
            jPanelEffectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEffectsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(effectsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(effectssettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        fileMenu.setText("File");
        MenuBar.add(fileMenu);

        viewMenu.setText("View");

        keyboardTextEnable.setText("Enable Keyboard Text");
        keyboardTextEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyboardTextEnableActionPerformed(evt);
            }
        });
        viewMenu.add(keyboardTextEnable);

        MenuBar.add(viewMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanelBottomThird, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelarpOscLFO, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jPanelVisualizer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelADSR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelEffects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanelADSR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanelarpOscLFO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelVisualizer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelEffects, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelBottomThird, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void KeyPressedHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KeyPressedHandler
        String noteName = evt.getComponent().getName();

        String note = noteName.substring(0, 2);

        int octaveNote = Integer.parseInt(noteName.substring(2)) - 1 + octave;

        Double freq = kb.getFrequency(note, octaveNote);
        synth.setNoteOn(true);
        synth.startNote(freq);
        
    }//GEN-LAST:event_KeyPressedHandler

    private void KeyReleasedHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KeyReleasedHandler
        synth.setNoteOn(false);
        synth.stopNote();
    }//GEN-LAST:event_KeyReleasedHandler

    private void octaveDOWNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_octaveDOWNMouseClicked
        octave--;
        octaveNum.setText("" + octave);
    }//GEN-LAST:event_octaveDOWNMouseClicked

    private void octaveUPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_octaveUPMouseClicked
        octave++;
        octaveNum.setText("" + octave);
    }//GEN-LAST:event_octaveUPMouseClicked

    private void filterHPSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_filterHPSliderStateChanged
        JSlider slider = (JSlider) evt.getSource();
        double frequency = slider.getValue();

        //System.out.println(frequency);

        synth.filter.frequency.set(frequency);
    }//GEN-LAST:event_filterHPSliderStateChanged

    private void reverbDryWetSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_reverbDryWetSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_reverbDryWetSliderStateChanged

    private void delayTimeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_delayTimeSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_delayTimeSliderStateChanged

    private void delayFeedbackSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_delayFeedbackSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_delayFeedbackSliderStateChanged

    private void compThresSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_compThresSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_compThresSliderStateChanged

    private void compRatioSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_compRatioSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_compRatioSliderStateChanged

    private void compAttackSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_compAttackSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_compAttackSliderStateChanged

    private void compReleaseSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_compReleaseSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_compReleaseSliderStateChanged

    private void chorusDepthSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chorusDepthSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_chorusDepthSliderStateChanged

    private void chorusRateSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chorusRateSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_chorusRateSliderStateChanged

    private void eqBassSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_eqBassSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_eqBassSliderStateChanged

    private void eqMidSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_eqMidSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_eqMidSliderStateChanged

    private void eqTrebleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_eqTrebleSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_eqTrebleSliderStateChanged

    private void keyboardTextEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyboardTextEnableActionPerformed
        if (keyboardTextEnable.isSelected()) {
            cN1.setText("z");
            dN1.setText("x");
            eN1.setText("c");
            fN1.setText("v");
            gN1.setText("b");
            aN1.setText("n");
            bN1.setText("m");
            cN2.setText("q");
            dN2.setText("w");
            eN2.setText("e");
            fN2.setText("r");
            gN2.setText("t");
            aN2.setText("y");
            bN2.setText("u");
            cN3.setText("i");
            
            dF1.setText("s");
            eF1.setText("d");
            gF1.setText("g");
            aF1.setText("h");
            bF1.setText("j");
            dF2.setText("2");
            eF2.setText("3");
            gF2.setText("5");
            aF2.setText("6");
            bF2.setText("7");
            
        } 
        else {
            cN1.setText("");
            dN1.setText("");
            eN1.setText("");
            fN1.setText("");
            gN1.setText("");
            aN1.setText("");
            bN1.setText("");
            cN2.setText("");
            dN2.setText("");
            eN2.setText("");
            fN2.setText("");
            gN2.setText("");
            aN2.setText("");
            bN2.setText("");
            cN3.setText("");
            
            dF1.setText("");
            eF1.setText("");
            gF1.setText("");
            aF1.setText("");
            bF1.setText("");
            dF2.setText("");
            eF2.setText("");
            gF2.setText("");
            aF2.setText("");
            bF2.setText("");
        }
    }//GEN-LAST:event_keyboardTextEnableActionPerformed

    private void oscAmpSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_oscAmpSliderStateChanged
        double amp = oscAmpSlider.getValue() / 1000.0;
        synth.oscillator.amplitude.set(amp);
        synth.setDefaultAmp(amp);
    }//GEN-LAST:event_oscAmpSliderStateChanged

    private void filterAmpSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_filterAmpSliderStateChanged
        JSlider slider = (JSlider) evt.getSource();
        double amp = slider.getValue();

        synth.filter.amplitude.set(amp);
    }//GEN-LAST:event_filterAmpSliderStateChanged

    private void adsrAttackSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_adsrAttackSliderStateChanged
        JSlider slider = (JSlider) evt.getSource();
        int attack = slider.getValue();

        synth.setAttack(attack);
    }//GEN-LAST:event_adsrAttackSliderStateChanged

    private void adsrDecaySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_adsrDecaySliderStateChanged
        JSlider slider = (JSlider) evt.getSource();
        int decay = slider.getValue();

        synth.setDecay(decay);
    }//GEN-LAST:event_adsrDecaySliderStateChanged

    private void adsrSustainSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_adsrSustainSliderStateChanged
        JSlider slider = (JSlider) evt.getSource();
        double sustain = slider.getValue();

        synth.setSustain(100 - sustain);
    }//GEN-LAST:event_adsrSustainSliderStateChanged

    private void adsrReleaseSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_adsrReleaseSliderStateChanged
        JSlider slider = (JSlider) evt.getSource();
        int release = slider.getValue();

        synth.setRelease(release);
    }//GEN-LAST:event_adsrReleaseSliderStateChanged

    private void oscSquareButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        synth.oscillator.setType(WaveType.SQUARE);
    }

    private void oscSawButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        synth.oscillator.setType(WaveType.SAWTOOTH);
    }
    
    public void startListener() {
        // Attempt to register the "NativeHook" that will monitor the keyboard.
        try {
            GlobalScreen.registerNativeHook();
        }
        catch (NativeHookException ex) {
            System.err.println("There was a problem registering the native hook.");
            System.err.println(ex.getMessage());

            // Terminate the program with the error printed if registration failed.
            System.exit(1);
        }

        /*
         From javadoc:
         "Adds the specified native key listener to receive key events from the native system.
         If listener is null, no exception is thrown and no action is performed."
         Must take an object of the class it is creating the listener from. Its parameter
         requires a "NativeKeyListener" object (so it can pass the output to methods like nativeKeyPressed())

         If doing it this way, you can either put "this" or new ClassName() as the parameter
         If doing it in the main method, you must pass new ClassName() to avoid static -> non static annoyances.
        */
        GlobalScreen.addNativeKeyListener(this);
    }

    public void stopListener() throws NativeHookException {
        GlobalScreen.unregisterNativeHook();
    }
    
        // Please read the top level synopsis found https://docs.oracle.com/javase/7/docs/api/java/awt/event/KeyEvent.html
    // By registering the NativeHook at the GlobalScreen level, we give Java access to KeyEvents outside of normal restrictions.

    @Override
    // The KeyPressed and KeyReleased methods will always return a KeyCode. The KeyChar will always be undefined.
    // In this case, we are using the static method getKeyText() to convert the output of the object getKeyCode()
    // This is consistent with the Java KeyEvent class.
    public void nativeKeyPressed(NativeKeyEvent nativeEvent) {
        // NOTE: Returned keyText is for individual keys, for example shift + 1 will show shift + 1, NOT ! even if ! is typed.
        String key = NativeKeyEvent.getKeyText(nativeEvent.getKeyCode()).toLowerCase(Locale.ROOT);
        //System.out.println(key);
        
        String noteName = kb.getNoteName(key);
        //System.out.println(noteName);

        if (noteName != null) {
            //play the note
            String note = noteName.substring(0, 2);

            int octaveNote = Integer.parseInt(noteName.substring(2)) - 1 + octave;

            Double freq = kb.getFrequency(note, octaveNote);
            
            switch (noteName) {
                case "cN1" -> cN1.setEnabled(false);
                case "dN1" -> dN1.setEnabled(false);
                case "eN1" -> eN1.setEnabled(false);
                case "fN1" -> fN1.setEnabled(false);
                case "gN1" -> gN1.setEnabled(false);
                case "aN1" -> aN1.setEnabled(false);
                case "bN1" -> bN1.setEnabled(false);
                case "cN2" -> cN2.setEnabled(false);
                case "dN2" -> dN2.setEnabled(false);
                case "eN2" -> eN2.setEnabled(false);
                case "fN2" -> fN2.setEnabled(false);
                case "gN2" -> gN2.setEnabled(false);
                case "aN2" -> aN2.setEnabled(false);
                case "bN2" -> bN2.setEnabled(false);
                case "cN3" -> cN3.setEnabled(false);
                case "dF1" -> dF1.setEnabled(false);
                case "eF1" -> eF1.setEnabled(false);
                case "gF1" -> gF1.setEnabled(false);
                case "aF1" -> aF1.setEnabled(false);
                case "bF1" -> bF1.setEnabled(false);
                case "dF2" -> dF2.setEnabled(false);
                case "eF2" -> eF2.setEnabled(false);
                case "gF2" -> gF2.setEnabled(false);
                case "aF2" -> aF2.setEnabled(false);
                case "bF2" -> bF2.setEnabled(false);
                default -> {
                }
            }
            
            synth.setNoteOn(true);
            synth.startNote(freq);
            
            //show it on the screen
            
        }
    }

    @Override
    // The KeyPressed and KeyReleased methods will always return a KeyCode. The KeyChar will always be undefined.
    // In this case, we are using the static method getKeyText() to convert the output of the object getKeyCode()
    // This is consistent with the Java KeyEvent class.
    public void nativeKeyReleased(NativeKeyEvent nativeEvent) {
        //System.out.println("KeyReleased: " + NativeKeyEvent.getKeyText(nativeEvent.getKeyCode()));
        String key = NativeKeyEvent.getKeyText(nativeEvent.getKeyCode()).toLowerCase(Locale.ROOT);
        //System.out.println(key);
        String noteName = kb.getNoteName(key);
        try {
            switch (noteName) {
                    case "cN1" -> cN1.setEnabled(true);
                    case "dN1" -> dN1.setEnabled(true);
                    case "eN1" -> eN1.setEnabled(true);
                    case "fN1" -> fN1.setEnabled(true);
                    case "gN1" -> gN1.setEnabled(true);
                    case "aN1" -> aN1.setEnabled(true);
                    case "bN1" -> bN1.setEnabled(true);
                    case "cN2" -> cN2.setEnabled(true);
                    case "dN2" -> dN2.setEnabled(true);
                    case "eN2" -> eN2.setEnabled(true);
                    case "fN2" -> fN2.setEnabled(true);
                    case "gN2" -> gN2.setEnabled(true);
                    case "aN2" -> aN2.setEnabled(true);
                    case "bN2" -> bN2.setEnabled(true);
                    case "cN3" -> cN3.setEnabled(true);
                    case "dF1" -> dF1.setEnabled(true);
                    case "eF1" -> eF1.setEnabled(true);
                    case "gF1" -> gF1.setEnabled(true);
                    case "aF1" -> aF1.setEnabled(true);
                    case "bF1" -> bF1.setEnabled(true);
                    case "dF2" -> dF2.setEnabled(true);
                    case "eF2" -> eF2.setEnabled(true);
                    case "gF2" -> gF2.setEnabled(true);
                    case "aF2" -> aF2.setEnabled(true);
                    case "bF2" -> bF2.setEnabled(true);
                    default -> {
                    }
                }
        }
        catch (NullPointerException e) {
        }
        
        synth.setNoteOn(false);
        synth.stopNote();
    }

    @Override
    // The KeyTyped will have a RawCode and KeyChar, but NOT a KeyCode. This is consistent with the Java KeyEvent class.
    // KeyChar will show what key was (or would have been) typed. For example, shift + 1 will return a char of '!'
    // This is consistent with the Java KeyEvent class.
    public void nativeKeyTyped(NativeKeyEvent nativeEvent) {
        // NOTE: Returned keyText is for individual keys, for example shift + 1 will show shift + 1, NOT ! even if ! is typed.
        //System.out.println("KeyTyped: " + nativeEvent.getKeyChar());
    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
        */
        try {
            UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (Exception ex) {
            System.err.println("Failed to initialize LaF");
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
                
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JButton aF1;
    private javax.swing.JButton aF2;
    private javax.swing.JButton aN1;
    private javax.swing.JButton aN2;
    private javax.swing.JSlider adsrAttackSlider;
    private javax.swing.JSlider adsrDecaySlider;
    private javax.swing.JLabel adsrLabel;
    private javax.swing.JSlider adsrReleaseSlider;
    private javax.swing.JSlider adsrSustainSlider;
    private javax.swing.ButtonGroup arpButtonGroup;
    private javax.swing.JToggleButton arpDOWN;
    private javax.swing.JLabel arpLabel;
    private javax.swing.JPanel arpPanel;
    private javax.swing.JSlider arpRateSlider;
    private javax.swing.JToggleButton arpUP;
    private javax.swing.JButton bF1;
    private javax.swing.JButton bF2;
    private javax.swing.JButton bN1;
    private javax.swing.JButton bN2;
    private javax.swing.JButton cN1;
    private javax.swing.JButton cN2;
    private javax.swing.JButton cN3;
    private javax.swing.JSlider chorusDepthSlider;
    private javax.swing.JToggleButton chorusEnable;
    private javax.swing.JPanel chorusPanel;
    private javax.swing.JSlider chorusRateSlider;
    private javax.swing.JSlider compAttackSlider;
    private javax.swing.JToggleButton compEnable;
    private javax.swing.JPanel compPanel;
    private javax.swing.JSlider compRatioSlider;
    private javax.swing.JSlider compReleaseSlider;
    private javax.swing.JSlider compThresSlider;
    private javax.swing.JButton dF1;
    private javax.swing.JButton dF2;
    private javax.swing.JButton dN1;
    private javax.swing.JButton dN2;
    private javax.swing.JToggleButton delayEnable;
    private javax.swing.JSlider delayFeedbackSlider;
    private javax.swing.JPanel delayPanel;
    private javax.swing.JSlider delayTimeSlider;
    private javax.swing.JButton eF1;
    private javax.swing.JButton eF2;
    private javax.swing.JButton eN1;
    private javax.swing.JButton eN2;
    private javax.swing.JLabel effectsLabel;
    private javax.swing.JTabbedPane effectsSettingsTP;
    private javax.swing.JPanel effectssettingsPanel;
    private javax.swing.JSlider eqBassSlider;
    private javax.swing.JToggleButton eqEnable;
    private javax.swing.JSlider eqMidSlider;
    private javax.swing.JPanel eqPanel;
    private javax.swing.JSlider eqTrebleSlider;
    private javax.swing.JButton fN1;
    private javax.swing.JButton fN2;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JSlider filterAmpSlider;
    private javax.swing.JSlider filterHPSlider;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JButton gF1;
    private javax.swing.JButton gF2;
    private javax.swing.JButton gN1;
    private javax.swing.JButton gN2;
    public javax.swing.JPanel ivp;
    private javax.swing.JPanel jPanelADSR;
    private javax.swing.JPanel jPanelBottomThird;
    private javax.swing.JPanel jPanelEffects;
    private javax.swing.JPanel jPanelFilter;
    private javax.swing.JPanel jPanelVisualizer;
    private javax.swing.JPanel jPanelarpOscLFO;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JPanel keyboardPanel;
    private javax.swing.JCheckBoxMenuItem keyboardTextEnable;
    private javax.swing.ButtonGroup lfoButtonGroup;
    private javax.swing.JComboBox<String> lfoComponentComboBox;
    private javax.swing.JSlider lfoFreqSlider;
    private javax.swing.JLabel lfoLabel;
    private javax.swing.JPanel lfoPanel;
    private javax.swing.JToggleButton lfoSawButton;
    private javax.swing.JToggleButton lfoSinButton;
    private javax.swing.JComboBox<String> lfoValueComboBox;
    private javax.swing.JScrollPane mukeLabelScrollPane;
    private javax.swing.JTextPane mukeLabelTextPane;
    private javax.swing.JButton octaveDOWN;
    private javax.swing.JLabel octaveLabel;
    private javax.swing.JLabel octaveNum;
    private javax.swing.JPanel octavePanel;
    private javax.swing.JButton octaveUP;
    private javax.swing.JSlider oscAmpSlider;
    private javax.swing.ButtonGroup oscButtonGroup;
    private javax.swing.JLabel oscLabel;
    private javax.swing.JPanel oscPanel;
    private javax.swing.JToggleButton oscSawButton;
    private javax.swing.JToggleButton oscSquareButton;
    private javax.swing.JPanel randomPanel;
    private javax.swing.JSlider reverbDryWetSlider;
    private javax.swing.JToggleButton reverbEnable;
    private javax.swing.JPanel reverbPanel;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JLabel visualizerLabel;
    // End of variables declaration//GEN-END:variables
}
